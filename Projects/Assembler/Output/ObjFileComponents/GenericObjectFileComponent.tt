<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# var typeList = new Type[]{ typeof(short), typeof(ushort), typeof(int), typeof(uint), typeof(long), typeof(ulong) }; #>

using System;
using System.IO;

// Note this file is auto-generated.
// Changes to the .cs file may be overwritten upon save.
// Make changes to the .tt file.


namespace Assembler.Output.ObjFileComponents
{
    <# foreach (Type ty in typeList)
        { 
    #>
/// <summary>
/// Represents a <#= ty.Name #> as a data element in a .obj file.
/// </summary>
public class <#= ty.Name #>DataElement : IObjectFileComponent
    {
        /// <summary>
        /// Creates an instance of the data element with the provided value.
        /// </summary>
        /// <param name="elem">The value of the element to store in the object file.</param>
        public <#= ty.Name #>DataElement(<#= ty.Name #> elem)
        {
            m_Elem = elem;
        }

        /// <summary>
        /// Writes the bitwise representation of this object to the Stream.
        /// </summary>
        /// <param name="outputStream">The output Stream object to write to.</param>
        public void WriteDataToFile(Stream outputStream)
        {
            byte[] objBytes = ToByteArray(m_Elem);
            outputStream.Write(objBytes, 0, objBytes.Length);
        }

        /// <summary>
        /// Gets the provided <#= ty.Name #> as a byte array.
        /// </summary>
        /// <param name="param">The value to convert to bytes.</param>
        private static byte[] ToByteArray(<#= ty.Name #> param)
        {
            return BitConverter.GetBytes(param);
        }

        private readonly <#= ty.Name #> m_Elem;
    }

    <#
    }
    #>
}
